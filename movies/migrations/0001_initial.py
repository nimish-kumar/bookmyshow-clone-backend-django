# Generated by Django 4.1.6 on 2023-02-24 10:25

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_fsm


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("meta", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="BookingSlot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_fully_booked", models.BooleanField(default=False)),
                ("starts_at", models.DateTimeField()),
                ("ends_at", models.DateTimeField()),
                ("layout", models.TextField()),
                (
                    "lang",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="movie_lang_slots",
                        to="meta.language",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Movie",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("is_released", models.BooleanField(default=False)),
                ("release_date", models.DateField()),
                ("descriptiom", models.TextField(blank=True, null=True)),
                (
                    "movie_length",
                    models.DurationField(help_text="Movie length in hours"),
                ),
                (
                    "cast",
                    models.ManyToManyField(
                        related_name="cast_movies", to="meta.artist"
                    ),
                ),
                (
                    "crew",
                    models.ManyToManyField(
                        related_name="crew_movies", to="meta.artist"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MovieFormat",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("format", models.CharField(max_length=5)),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="TrailerUrl",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("trailer_url", models.URLField(max_length=250)),
                (
                    "movie",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="movie_trailers",
                        to="movies.movie",
                    ),
                ),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="Theatre",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "postal_code",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MaxValueValidator(855117),
                            django.core.validators.MinValueValidator(110001),
                        ]
                    ),
                ),
                ("address", models.TextField()),
                ("area_name", models.CharField(max_length=30)),
                ("details", models.TextField()),
                ("coordinates", models.CharField(blank=True, max_length=30, null=True)),
                ("location_link", models.URLField(blank=True, null=True)),
                (
                    "city",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="city_theatres",
                        to="meta.city",
                    ),
                ),
                (
                    "facilities",
                    models.ManyToManyField(
                        related_name="faicility_theatres", to="meta.facility"
                    ),
                ),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="SlotGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=10)),
                ("grp_code", models.CharField(max_length=2)),
                ("start_rowhead", models.CharField(max_length=3)),
                ("end_rowhead", models.CharField(max_length=3)),
                ("cost", models.PositiveSmallIntegerField()),
                (
                    "slot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="slot_booking",
                        to="movies.bookingslot",
                    ),
                ),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="Screen",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("screen_id", models.CharField(max_length=5)),
                (
                    "theatre",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="theatre_screen",
                        to="movies.theatre",
                    ),
                ),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.AddField(
            model_name="movie",
            name="format",
            field=models.ManyToManyField(
                related_name="format_movies", to="movies.movieformat"
            ),
        ),
        migrations.AddField(
            model_name="movie",
            name="genre",
            field=models.ManyToManyField(related_name="genre_movies", to="meta.genre"),
        ),
        migrations.AddField(
            model_name="movie",
            name="lang",
            field=models.ManyToManyField(
                related_name="lang_movies", to="meta.language"
            ),
        ),
        migrations.AddField(
            model_name="movie",
            name="subtitles_lang",
            field=models.ManyToManyField(
                related_name="subtitle_lang_movies", to="meta.language"
            ),
        ),
        migrations.AddField(
            model_name="bookingslot",
            name="movie",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="movie_slots",
                to="movies.movie",
            ),
        ),
        migrations.AddField(
            model_name="bookingslot",
            name="screen",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="screen_slots",
                to="movies.screen",
            ),
        ),
        migrations.AddField(
            model_name="bookingslot",
            name="subtitles_lang",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="subtitle_lang_slots",
                to="meta.language",
            ),
        ),
        migrations.CreateModel(
            name="Booking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "seat_number",
                    models.SmallIntegerField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "status",
                    django_fsm.FSMIntegerField(
                        choices=[
                            (0, "Available"),
                            (1, "In Progress"),
                            (2, "Payment Failed"),
                            (3, "Payment Done"),
                            (4, "Booked"),
                            (5, "Error"),
                        ],
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("row", models.CharField(max_length=3)),
                ("column", models.CharField(max_length=3)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("paid_amt", models.PositiveSmallIntegerField(blank=True, null=True)),
                (
                    "slot_grp",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="slot_grp",
                        to="movies.slotgroup",
                        verbose_name="Theatre group",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_bookings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at", "-id"],
            },
        ),
        migrations.AddIndex(
            model_name="slotgroup",
            index=models.Index(fields=["grp_code", "slot"], name="slot_grp_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="slotgroup",
            unique_together={("grp_code", "slot")},
        ),
        migrations.AddIndex(
            model_name="screen",
            index=models.Index(fields=["screen_id", "theatre"], name="screen_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="screen",
            unique_together={("screen_id", "theatre")},
        ),
        migrations.AddIndex(
            model_name="booking",
            index=models.Index(
                fields=["slot_grp", "seat_number"], name="uniq_booking_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="booking",
            index=models.Index(fields=["status"], name="booking_status_idx"),
        ),
        migrations.AddIndex(
            model_name="booking",
            index=models.Index(fields=["row", "column"], name="booking_row_col_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="booking",
            unique_together={("slot_grp", "seat_number")},
        ),
    ]
